kernprof -l -v main.py




Insgesammt wurden 191547 Farbinzidenzmatrizen untersucht hiervon sind 3017 durch den eigenwert check durchgekommen und 188530 wurden hierdurch zurückgewiesen
Benötigte Zeit in Sekunden: 187.18019032478333
Wrote profile results to main.py.lprof
Timer unit: 1e-06 s

Total time: 0.181352 s
File: /home/nbeckmann/BA_Arbeit/Graph_Coloring/CSP_Solver.py
Function: create_Constrains at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def create_Constrains(graph, c_A_M, numberOfColors):
     8      3017       1874.0      0.6      1.0      functions = []
     9     32000      24416.8      0.8     13.5      for nodeToCheck in graph.nodes:
    10     28983      40046.0      1.4     22.1          neighbors = graph.neighbors(nodeToCheck)
    11                                           
    12                                           
    13     28983      23420.1      0.8     12.9          def f(*arg):
    14                                                     sum = np.zeros(numberOfColors)
    15                                                     # counts the number for each color in the "nachbarschaft" of nodeToCheck
    16                                                     for color in arg[1:]:
    17                                                       sum[color] +=1
    18                                           
    19                                                     if not np.array_equal(sum , c_A_M[arg[0]]):
    20                                                       return False
    21                                                     return True
    22                                           
    23     28983      17141.6      0.6      9.5          var = []
    24     28983      21112.2      0.7     11.6          var.append(nodeToCheck)
    25     28983      27114.5      0.9     15.0          var.extend(neighbors)
    26     28983      24514.1      0.8     13.5          functions.append((f,var))
    27      3017       1712.7      0.6      0.9      return functions

Total time: 126.362 s
File: /home/nbeckmann/BA_Arbeit/Graph_Coloring/CSP_Solver.py
Function: solveGraphCSP at line 29

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    29                                           @profile
    30                                           def solveGraphCSP(graph,c_A_M) -> [dict]:
    31      3017       4939.2      1.6      0.0    numberOfColors =  len(c_A_M[0])
    32                                           
    33      3017     327515.1    108.6      0.3    constrainsTuple = create_Constrains(graph, c_A_M, numberOfColors)
    34      3017      11361.0      3.8      0.0    problem = Problem()
    35                                           
    36     32000      21584.5      0.7      0.0    for n in graph.nodes:
    37     28983      93617.7      3.2      0.1      problem.addVariable(n, range(numberOfColors))
    38                                           
    39     32000      20979.4      0.7      0.0    for (f,var) in constrainsTuple:
    40     28983      59150.3      2.0      0.0      problem.addConstraint(FunctionConstraint(f),var)
    41                                           
    42      3017  125819861.3  41703.6     99.6    s= problem.getSolutions()
    43      3017       3115.5      1.0      0.0    return s

Total time: 0.0602646 s
File: /home/nbeckmann/BA_Arbeit/Graph_Coloring/file_Extraction.py
Function: strToGraph at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def strToGraph(str, numNodes):
     9       176        872.5      5.0      1.4    G = nx.Graph()
    10      1859       1333.6      0.7      2.2    for i in range(1, numNodes+1):
    11      1683       5545.1      3.3      9.2        G.add_node(i)
    12                                           
    13      1859       1165.3      0.6      1.9    for s in str:
    14      1683       1759.4      1.0      2.9      t = s.split(":")
    15      1683       1473.1      0.9      2.4      x = int(t[0])
    16                                               
    17      8799       6113.3      0.7     10.1      for i in t[1].split():
    18                                                 
    19      7116      36380.4      5.1     60.4        G.add_edge(x, int(i))
    20                                             #re = {int(t[0]): todo}
    21                                             # todo check if graph is regulär
    22       176       5514.0     31.3      9.1    if not nx.is_regular(G):
    23                                               print("Ein ausgelesener Graph war nicht regulär Irgendwas mit dem auslesen stimmt nicht \n ERROR!!!!!!!!!!!!!!!!")
    24                                             
    25       176        107.9      0.6      0.2    return G

Total time: 0.162815 s
File: /home/nbeckmann/BA_Arbeit/Graph_Coloring/file_Extraction.py
Function: getGraphMatricsFormFile at line 28

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    28                                           @profile
    29                                           def getGraphMatricsFormFile(fileName):
    30        13        272.5     21.0      0.2    print(f"Get Graphs from file: {fileName}")
    31        13         34.5      2.7      0.0    numNodes = int( fileName.split("/")[-1].split("_")[0] )
    32                                           
    33        13      80528.4   6194.5     49.5    f = open(fileName , "r")
    34        13       2467.0    189.8      1.5    s = f.read()
    35        13         17.5      1.3      0.0    lis = []
    36        13         10.5      0.8      0.0    result = []
    37       189        329.8      1.7      0.2    for g in s.split("Graph ")[1:]:
    38                                               #print(g)
    39                                               #print("test")
    40       176        340.4      1.9      0.2      graph = g.split("Taillenweite")[0].split('\n')[1:]
    41       176        128.4      0.7      0.1      finalGraph = graph[1:-1]
    42       176        148.4      0.8      0.1      lis.append(finalGraph)
    43                                           
    44       189        133.8      0.7      0.1    for g in lis:
    45       176      78396.4    445.4     48.2      result.append( strToGraph(g, numNodes) )
    46                                           
    47        13          7.7      0.6      0.0    return result

Total time: 0.0856519 s
File: /home/nbeckmann/BA_Arbeit/Graph_Coloring/file_Extraction.py
Function: getColorAdjMatFromFile at line 49

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    49                                           @profile
    50                                           def getColorAdjMatFromFile(fileName):
    51         3         69.8     23.3      0.1    print(f"Get Colorings from file: {fileName}")
    52         3      23599.3   7866.4     27.6    f = open(fileName , "r")
    53         3       1567.2    522.4      1.8    s = f.read()
    54         3          5.3      1.8      0.0    colorings = {}
    55         3          2.9      1.0      0.0    numCol = 0
    56                                             
    57        12        117.7      9.8      0.1    for g in s.split("#")[1:]:
    58                                               
    59                                               # Regulärer Ausdruck, um alle 'Matrix(...)' Einträge zu finden
    60         9          6.4      0.7      0.0      patternMat = r'Matrix\((.*?)\)'
    61                                           
    62         9          5.8      0.6      0.0      patternColorTyp = r'l\d{2}'
    63                                           
    64                                               # Alle passenden Einträge extrahieren
    65         9       2688.4    298.7      3.1      matchesMat = re.findall(patternMat, g)
    66                                           
    67         9        208.8     23.2      0.2      matchesColorTyp = re.findall(patternColorTyp, g)
    68                                           
    69                                               
    70         9          5.9      0.7      0.0      typ = ""
    71         9          5.7      0.6      0.0      mat = []
    72                                           
    73        18         14.1      0.8      0.0      for match in matchesColorTyp:
    74                                                 #print(f"Gefundener Farb Typ: {match}")
    75         9          5.3      0.6      0.0        typ = match
    76         9          7.2      0.8      0.0        numCol = typ[1]
    77                                                 
    78                                               # Ausgabe der extrahierten Informationen
    79      2874       1736.0      0.6      2.0      for match in matchesMat:
    80      2865       1824.4      0.6      2.1        lis = []
    81                                                 #print(f"Gefundene Matrix: {match}")
    82                                           
    83                                                 #convert string to array
    84     14028      10650.3      0.8     12.4        for s in match[1:-1].split("[")[1:] :
    85     11163      11243.2      1.0     13.1          tar = s.split("]")[0].split(",")
    86     11163      23257.5      2.1     27.2          lis.append( [int(i) for i in tar]  )
    87      2865       8610.8      3.0     10.1        mat.append(np.array(lis))
    88                                                 
    89                                                 
    90         9         12.2      1.4      0.0      colorings[int(typ[2])] = mat
    91                                           
    92                                           #  for tup in colorings:
    93                                            #   print(tup[0])
    94                                             #  print(tup[1])
    95         3          2.3      0.8      0.0    result = {}
    96         3          3.6      1.2      0.0    result[int(numCol)] =  colorings
    97                                             #print(f"Colors: {numCol}")
    98                                           
    99         3          1.8      0.6      0.0    return result

Total time: 0.116627 s
File: /home/nbeckmann/BA_Arbeit/Graph_Coloring/file_Extraction.py
Function: getColorAdjMatFromDir at line 102

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   102                                           @profile
   103                                           def getColorAdjMatFromDir(colorAdj_ordner_pfad):
   104         1        426.7    426.7      0.4    dateien = os.listdir(colorAdj_ordner_pfad)
   105         1          5.1      5.1      0.0    colorAdjFiles = [f for f in dateien if "sage" in f]
   106                                           
   107         1          0.8      0.8      0.0    colMat = {}
   108                                               
   109         4          4.1      1.0      0.0    for file in colorAdjFiles:
   110         3     116189.4  38729.8     99.6      colMat.update( getColorAdjMatFromFile(colorAdj_ordner_pfad  + file) )
   111                                           
   112         1          0.5      0.5      0.0    return colMat

Total time: 0.165225 s
File: /home/nbeckmann/BA_Arbeit/Graph_Coloring/file_Extraction.py
Function: getGraphListFromDir at line 115

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   115                                           @profile
   116                                           def getGraphListFromDir(graph_ordner_pfad):
   117         1          1.2      1.2      0.0    listGraphs = []
   118                                           
   119         1        171.2    171.2      0.1    dateien = os.listdir(graph_ordner_pfad)          # All files in the path specified above
   120         1          6.2      6.2      0.0    graphFiles = [f for f in dateien if "asc" in f]  #  filter for only asc datafiles
   121                                             # filter graphs where the regularity is over 5 because we have no color Matrixes for that 
   122         1          5.3      5.3      0.0    graphFiles = [f for f in graphFiles if not "6_3.asc" in f and not "7_3.asc" in f]
   123                                           
   124                                               
   125                                               
   126        14         14.6      1.0      0.0    for file in graphFiles:
   127        13     165025.8  12694.3     99.9      listGraphs.extend( getGraphMatricsFormFile(graph_ordner_pfad  + file) )
   128                                           
   129                                           
   130         1          0.6      0.6      0.0    return listGraphs

Total time: 54.8054 s
File: /home/nbeckmann/BA_Arbeit/Graph_Coloring/helpFunction.py
Function: eigenvalueCheckPositiv at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def eigenvalueCheckPositiv(graph,cAM):
     9    191547     119504.8      0.6      0.2      dec = 4
    10    191547   20596556.1    107.5     37.6      adjGraph = nx.to_numpy_array(graph)
    11                                               #print(adjGraph)
    12    191547   12407859.1     64.8     22.6      eigenvaluesGraph = np.round(np.linalg.eigvals(adjGraph) , decimals=dec) 
    13                                               #gets eigenvalues of colMat and removes duplicates because we only have to check if they are ones in the eigenvalues of the graph adj. Mat.
    14    191547    9394158.3     49.0     17.1      eig = np.round(np.linalg.eigvals(cAM) , decimals=dec) 
    15    191547    3550949.9     18.5      6.5      eigenvaluesColMat = np.unique( eig )
    16                                           
    17                                               #check for eigenvalues of colMat and adj. Mat of Graph compare https://www.math.uni-bielefeld.de/~frettloe/papers/perf-gr-col.pdf Theorem 10
    18    191547    8736375.5     45.6     15.9      return  np.all(np.isin(eigenvaluesColMat, eigenvaluesGraph))

Total time: 0.584393 s
File: /home/nbeckmann/BA_Arbeit/Graph_Coloring/helpFunction.py
Function: k_con at line 20

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    20                                           @profile
    21                                           def k_con(g):
    22       176        121.3      0.7      0.0          max = 0
    23       908        813.1      0.9      0.1          for i in range(1,12):
    24       908     582742.8    641.8     99.7                  if nx.is_k_edge_connected(g, i):
    25       732        578.4      0.8      0.1                          max = i
    26                                                           else:
    27       176        137.3      0.8      0.0                          return max
    28                                                   return max

Total time: 0.644873 s
File: /home/nbeckmann/BA_Arbeit/Graph_Coloring/helpFunction.py
Function: importantGraphInfo at line 59

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    59                                           @profile
    60                                           def importantGraphInfo(name,graph):
    61       176        242.1      1.4      0.0      head = ["Name: ", " Regularität: ", " k-zusammenhangs Zahl: "," Anzahl Knoten: "," Anzahl Automorphismen: ", " Anzahl ColMat m. Färb.: "," Anzahl Färbungen: "]
    62       176       3929.2     22.3      0.6      node = list(graph.nodes())[0]
    63       176        937.4      5.3      0.1      reg = int(len(list( graph.neighbors(node ))))
    64       176     588738.0   3345.1     91.3      conectNum = k_con(graph)
    65       176        242.6      1.4      0.0      numNodes = graph.number_of_nodes()
    66       176       1720.3      9.8      0.3      G_nauty = nauty.Graph(numNodes)
    67                                               # Füge die Kanten aus dem NetworkX-Graphen hinzu
    68       176        296.9      1.7      0.0      if 0 in graph.nodes:
    69                                                   for n in graph.nodes:
    70                                                       G_nauty.connect_vertex(n, list(graph.neighbors(n)) )
    71                                               else:
    72      1859       1308.1      0.7      0.2          for n in graph.nodes:
    73                                                       # Graphen aus datei fangen mit 1 an und müssen auf 0 runtergesetzt werden
    74      1683      14728.2      8.8      2.3              G_nauty.connect_vertex(n-1, [i-1 for i in list(graph.neighbors(n))] )
    75                                               
    76                                           
    77       176       4371.4     24.8      0.7      automorphism_group = nauty.autgrp(G_nauty )
    78       176        194.2      1.1      0.0      num = float(automorphism_group[1])
    79       176        208.9      1.2      0.0      offset = float( automorphism_group[2])
    80       176        331.4      1.9      0.1      autSize = num * (10**offset)
    81       176      26743.2    152.0      4.1      adjGraph = nx.to_numpy_array(graph)
    82       176        255.7      1.5      0.0      info = {
    83       176        117.7      0.7      0.0          "Name": name,
    84       176         99.5      0.6      0.0          "Reg": reg,
    85       176         99.3      0.6      0.0          "k-zusmZahl": conectNum ,
    86       176         96.1      0.5      0.0          "numNodes": numNodes,
    87       176        101.7      0.6      0.0          "autGrupSize": autSize,
    88                                               }
    89                                           
    90       176        111.4      0.6      0.0      return info

Total time: 186.714 s
File: main.py
Function: main at line 21

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    21                                           @profile
    22                                           def main():
    23         1     116659.4 116659.4      0.1      colMat = file_Extraction.getColorAdjMatFromDir(colorAdj_ordner_pfad)
    24         1     165273.0 165273.0      0.1      listGraphs = file_Extraction. getGraphListFromDir(graph_ordner_pfad)
    25                                           
    26         1          0.7      0.7      0.0      negTotal = 0
    27         1          0.5      0.5      0.0      posTotal = 0
    28         1          0.6      0.6      0.0      graphCounter = 0
    29         1         26.9     26.9      0.0      print("anzahl Graphen: ", len(listGraphs) )
    30         1          2.9      2.9      0.0      start_time = time.time() 
    31       177        194.4      1.1      0.0      for graph in listGraphs: #[:4]: #todo wieder alle graphen prüfem
    32                                           
    33       176        169.8      1.0      0.0          posibleMatrixes = []
    34                                                   
    35       176        152.9      0.9      0.0          graphCounter +=1
    36       176     652540.7   3707.6      0.3          info = helpFunction.importantGraphInfo(f"Graph no. {graphCounter}",graph)
    37       176        133.5      0.8      0.0          k = info["Reg"]
    38       176        406.1      2.3      0.0          numColors = list( colMat.keys() )
    39       176        120.4      0.7      0.0          negCount = 0
    40       176         98.1      0.6      0.0          posCount = 0
    41       176         94.3      0.5      0.0          noSolutionCounter = 0
    42       176      18457.2    104.9      0.0          adjGraph = nx.to_numpy_array(graph)
    43       176        112.2      0.6      0.0          numColorInzMatWithColoring = 0
    44       176         99.2      0.6      0.0          numColorings = 0
    45                                                   
    46       704        513.2      0.7      0.0          for nColor in numColors:
    47      2112       2070.2      1.0      0.0              for reg, listMat in colMat[nColor].items():
    48      1584       1213.4      0.8      0.0                  if reg == k:
    49                                                           
    50    192075     130290.8      0.7      0.1                      for cAM in listMat:
    51    191547     102640.7      0.5      0.1                          eigValCheckResult = False
    52                                                                   #check for eigenvalues of colMat and adj. Mat of Graph compare https://www.math.uni-bielefeld.de/~frettloe/papers/perf-gr-col.pdf Theorem 10
    53                                                                   #todo check ausbauen um zu testen ob es probleme macht
    54    191547   57078904.4    298.0     30.6                          if not helpFunction.eigenvalueCheckPositiv(graph,cAM):
    55                                                                       #print(eigenvaluesColMat)
    56    188530     109099.9      0.6      0.1                              eigValCheckResult = False
    57    188530     133096.0      0.7      0.1                              negCount +=1
    58    188530     108459.2      0.6      0.1                              continue   # continue auskommentieren um zu tesssten ob Eigenwerttest Matritzen ausschließt die  eine Lösung haben
    59                                                                   else:
    60      3017       1702.7      0.6      0.0                              eigValCheckResult = True
    61      3017       2148.1      0.7      0.0                              posCount +=1
    62      3017  126507568.5  41931.6     67.8                          solution = CSP_Solver.solveGraphCSP(graph,cAM)
    63                                                                   
    64                                           
    65      3017       2024.9      0.7      0.0                          if not solution:
    66                                                                       #print(f"no solution for Graph: {graph.adj} \n and a colMat: {cAM}")
    67                                                                       
    68      2328       2231.6      1.0      0.0                              noSolutionCounter  +=1
    69                                                                   else:
    70                                                                       # check if eigenvalue test was negativ but problem has coloring -> error
    71       689        442.6      0.6      0.0                              if not eigValCheckResult:
    72                                                                           print("Error da test auf Eigenwert Negativ aber es gibt Färbung!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    73                                                                           print(f"Graph no. {graphCounter}", adjGraph, cAM, solution)
    74                                                                           sys.exit()
    75       689    1183832.7   1718.2      0.6                              csvWriter.saveColorings(csvFile,f"Graph no. {graphCounter}", adjGraph, cAM, solution )
    76       689        678.0      1.0      0.0                              numColorInzMatWithColoring += 1
    77       689        803.8      1.2      0.0                              numColorings += len(solution)
    78       689        830.1      1.2      0.0                              posibleMatrixes.append(cAM)
    79                                           
    80       176      62878.0    357.3      0.0          csvWriter.saveSymInfo( fileCsvSymAna,info,numColorInzMatWithColoring, numColorings) 
    81       176       4971.7     28.2      0.0          print(f"Der Graph hatte eine Regularität von {k} und hierbei konnten  {negCount} Kombinationen ausgeschlossen werden und {posCount} Paare mussten überprüft werden\n hiervon hatten {noSolutionCounter } keine Lösung")
    82       176     322718.7   1833.6      0.2          csvWriter.saveGraphAndColoring(csvFileOverview,f"Graph no. {graphCounter}",info,numColorInzMatWithColoring, numColorings, adjGraph, posibleMatrixes)
    83       176        223.5      1.3      0.0          negTotal += negCount
    84       176        216.1      1.2      0.0          posTotal += posCount
    85                                                   
    86         1         14.5     14.5      0.0      print(f"Insgesammt wurden {posTotal+negTotal} Farbinzidenzmatrizen untersucht hiervon sind {posTotal} durch den eigenwert check durchgekommen und {negTotal} wurden hierdurch zurückgewiesen")
    87         1          3.1      3.1      0.0      end_time = time.time()
    88         1         20.6     20.6      0.0      print(f"Benötigte Zeit in Sekunden: {end_time - start_time }")

nbeckmann@DESKTOP-8B6I4VH:~/BA_Arbeit/Graph_Coloring$ 




